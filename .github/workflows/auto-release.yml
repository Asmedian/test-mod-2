name: Auto Release

on:
  workflow_dispatch: # Ручной запуск
  # schedule:
  #   - cron: '0 * * * *' # Отключено для тестов

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout репозитория
        uses: actions/checkout@v4

      - name: Получение текущей версии из ERA_Project.ini
        run: |
          VERSION=$(awk -F= '/^Version/{print $2}' ERA_Project.ini | tr -d ' ')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Текущая версия: $VERSION"

      - name: Получение последнего релиза через Octokit
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: 'Asmedian',
              repo: 'test-mod-2'
            });
            console.log(`Последний релиз: ${data.tag_name}`);
            core.setOutput('latest_version', data.tag_name);

      - name: Логирование версии релиза
        run: |
          echo "Последний релиз: ${{ steps.get_latest_release.outputs.latest_version }}"

      - name: Сравнение версий
        run: |
          if [[ "${{ env.VERSION }}" > "${{ steps.get_latest_release.outputs.latest_version }}" ]]; then
            echo "NEW_VERSION=true" >> $GITHUB_ENV
            echo "Найдена новая версия: ${{ env.VERSION }}"
          else
            echo "NEW_VERSION=false" >> $GITHUB_ENV
            echo "Обновление не требуется."
          fi

      - name: Создание архива
        if: env.NEW_VERSION == 'true'
        run: |
          echo "Создаётся архив era-project-${{ env.VERSION }}.zip..."
          zip -r "era-project-${{ env.VERSION }}.zip" . -x "*.git* some_large_folder/*"
          echo "Архив era-project-${{ env.VERSION }}.zip успешно создан."

      - name: Создание нового релиза
        if: env.NEW_VERSION == 'true'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Логирование URL загрузки релиза
        if: env.NEW_VERSION == 'true'
        run: |
          echo "URL загрузки релиза: ${{ steps.create_release.outputs.upload_url }}"

      - name: Загрузка архива в релиз
        if: env.NEW_VERSION == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./era-project-${{ env.VERSION }}.zip
          asset_name: era-project-${{ env.VERSION }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
